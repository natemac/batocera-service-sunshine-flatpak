#!/bin/bash
# /userdata/system/services/sunshine
# v2 â€” System-scoped Flatpak install to avoid multi-install prompts
# - Auto-adds Flathub (system)
# - Installs/updates Sunshine (system scope)
# - Removes any user-scope install to prevent prompts
# - Auto-detects Pulse sink (RUNNING > default) and exports PULSE_SINK
# - Logs to /userdata/system/logs/sunshine.log
# - Starts Sunshine headless and writes a PID file

set -euo pipefail

SERVICE_NAME="sunshine"
APP_ID="dev.lizardbyte.app.Sunshine"
LOGDIR="/userdata/system/logs"
LOGFILE="${LOGDIR}/${SERVICE_NAME}.log"
PIDFILE="/var/run/${SERVICE_NAME}.pid"

mkdir -p "$LOGDIR"
log(){ echo "$(date '+%F %T') | $*"; }
need_cmd(){ command -v "$1" >/dev/null 2>&1 || { echo "ERROR: '$1' not found"; exit 1; }; }

ensure_flatpak(){
  need_cmd flatpak
  # Ensure Flathub in *system* scope to avoid interactive prompt
  flatpak --system remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo \
    >>"$LOGFILE" 2>&1 || true
}

ensure_sunshine(){
  # If a user-scope install exists, remove it so we can standardize on system scope
  if flatpak --user info "$APP_ID" >/dev/null 2>&1; then
    log "Found $APP_ID in user scope; removing to prefer system scope..."
    flatpak --user uninstall -y --noninteractive "$APP_ID" >>"$LOGFILE" 2>&1 || true
  fi

  # Install system-scope if missing
  if ! flatpak --system info "$APP_ID" >/dev/null 2>&1; then
    log "Installing $APP_ID (system scope) from Flathub..."
    flatpak --system install -y --noninteractive flathub "$APP_ID" >>"$LOGFILE" 2>&1 || {
      echo "Install failed"; exit 1; }
  else
    log "Sunshine already installed (system scope); checking for updates..."
  fi

  # Update if available (non-interactive)
  flatpak --system update -y --noninteractive "$APP_ID" >>"$LOGFILE" 2>&1 || true
}

pick_audio_sink(){
  export PULSE_SERVER=unix:/run/pulse/native
  # Prefer a RUNNING sink; else fall back to Pulse default
  local running default
  running=$(pactl list short sinks 2>/dev/null | awk '$6=="RUNNING"{print $2; exit}')
  default=$(pactl info 2>/dev/null | awk -F': ' '/^Default Sink/{print $2}')
  if [ -n "${running:-}" ]; then
    export PULSE_SINK="$running"
  elif [ -n "${default:-}" ]; then
    export PULSE_SINK="$default"
  fi
  log "Using Pulse sink: ${PULSE_SINK:-<none>}"
}

start_service(){
  exec >>"$LOGFILE" 2>&1
  log "start service ${SERVICE_NAME}"

  ensure_flatpak
  ensure_sunshine
  pick_audio_sink

  # Avoid duplicate runs
  if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE" 2>/dev/null)" 2>/dev/null; then
    log "Sunshine already running (pid $(cat "$PIDFILE"))"
    return 0
  fi

  # Launch Sunshine (system scope)
  nohup flatpak --system run "$APP_ID" >/dev/null 2>&1 &
  echo $! >"$PIDFILE"
  log "launched Sunshine (pid $(cat "$PIDFILE"))"
}

stop_service(){
  exec >>"$LOGFILE" 2>&1
  log "stop service ${SERVICE_NAME}"
  if [ -f "$PIDFILE" ]; then
    kill "$(cat "$PIDFILE")" 2>/dev/null || true
    rm -f "$PIDFILE"
  fi
  # Fallback: kill any leftover instance
  pkill -f "flatpak --system run ${APP_ID}" 2>/dev/null || true
}

status_service(){
  if pgrep -f "flatpak --system run ${APP_ID}" >/dev/null; then
    echo "sunshine: running"
  else
    echo "sunshine: stopped"
  fi
}

uninstall_service(){
  exec >>"$LOGFILE" 2>&1
  log "uninstall ${SERVICE_NAME}"
  stop_service
  # Remove system-scope app; also try user scope just in case
  flatpak --system uninstall -y --noninteractive "$APP_ID" >>"$LOGFILE" 2>&1 || true
  flatpak --user uninstall -y --noninteractive "$APP_ID" >>"$LOGFILE" 2>&1 || true
  echo "Sunshine Flatpak uninstalled. You may now remove this service file."
}

case "${1-}" in
  start)   start_service ;;
  stop)    stop_service ;;
  restart) stop_service; sleep 1; start_service ;;
  status)  status_service ;;
  uninstall) uninstall_service ;;
  *)
    echo "Usage: $0 {start|stop|restart|status|uninstall}"
    exit 1
    ;;
esac

exit 0
